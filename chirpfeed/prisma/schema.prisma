generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://chirpfeed_owner:npg_KjEp2mWqZi7A@ep-little-bonus-a2nnsb20-pooler.eu-central-1.aws.neon.tech/chirpfeed?sslmode=require"
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  name           String
  bio            String?
  profilePicture String?
  superUser      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  posts          Post[]
  comments       Comment[]
  followers      Follow[]   @relation("UserFollowers")
  following      Follow[]   @relation("UserFollowing")

  @@map("users")
}

model Post {
  id        String    @id @default(uuid())
  text      String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@map("posts")
}

model Comment {
  id        String    @id @default(uuid())
  text      String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  
  // Relations
  followerId  String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
